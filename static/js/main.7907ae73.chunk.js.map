{"version":3,"sources":["components/screen/Screen.js","components/button/Button.js","components/numbers/Numbers.js","components/operations/Operations.js","components/inputs/Inputs.js","App.js","serviceWorker.js","index.js"],"names":["Screen","id","className","onClick","this","props","onClickClean","displayText","React","Component","Button","classes","push","type","join","e","label","Numbers","createButtonsElements","buttonElements","i","state","buttons","length","key","onClickTotal","Operations","Inputs","onClickOperando","onClickOperador","App","display","isNaN","resultDisplayed","setState","operador","calculate","operando","displayResult","parseFloat","Math","sqrt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7907ae73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Screen.css\";\r\n\r\nclass Screen extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"display\">\r\n\t\t\t\t<span className=\"clean\" onClick={this.props.onClickClean}>\r\n\t\t\t\t\tx\r\n\t\t\t\t</span>\r\n\t\t\t\t{this.props.displayText}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Screen;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends React.Component {\r\n\trender() {\r\n\t\tvar classes = [\"defaultButton\"];\r\n\t\tclasses.push(this.props.className);\r\n\t\treturn (\r\n\t\t\t<button\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tclassName={classes.join(\" \")}\r\n\t\t\t\tonClick={e => this.props.onClick(e, this.props.label)}\r\n\t\t\t>\r\n\t\t\t\t{this.props.label}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Numbers.css\";\r\n\r\nimport Button from \"../button/Button\";\r\n\r\nclass Numbers extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tbuttons: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \".\"]\r\n\t\t};\r\n\t}\r\n\r\n\tcreateButtonsElements = () => {\r\n\t\tvar buttonElements = [];\r\n\t\tfor (var i = 0; i < this.state.buttons.length; i++) {\r\n\t\t\tbuttonElements.push(\r\n\t\t\t\t<Button\r\n\t\t\t\t\tkey={\"button\" + [i]}\r\n\t\t\t\t\tlabel={this.state.buttons[i]}\r\n\t\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn buttonElements;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"numbers\">\r\n\t\t\t\t{this.createButtonsElements()}\r\n\t\t\t\t<Button\r\n\t\t\t\t\tlabel=\"=\"\r\n\t\t\t\t\tonClick={this.props.onClickTotal}\r\n\t\t\t\t\tclassName=\"greenBtn\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Numbers;\r\n","import React from \"react\";\r\nimport \"./Operations.css\";\r\n\r\nimport Button from \"../button/Button\";\r\n\r\nclass Operations extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tbuttons: [\"+\", \"-\", \"/\", \"x\", \"%\", \"x2\", \"V\"]\r\n\t\t};\r\n\t}\r\n\r\n\tcreateButtonsElements = () => {\r\n\t\tvar buttonElements = [];\r\n\t\tfor (var i = 0; i < this.state.buttons.length; i++) {\r\n\t\t\tbuttonElements.push(\r\n\t\t\t\t<Button\r\n\t\t\t\t\tkey={\"button\" + [i]}\r\n\t\t\t\t\tlabel={this.state.buttons[i]}\r\n\t\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn buttonElements;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn <div id=\"operations\">{this.createButtonsElements()}</div>;\r\n\t}\r\n}\r\n\r\nexport default Operations;\r\n","import React from \"react\";\r\nimport \"./Inputs.css\";\r\n\r\nimport Numbers from \"../numbers/Numbers\";\r\nimport Operations from \"../operations/Operations\";\r\n\r\nclass Inputs extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"inputs\">\r\n\t\t\t\t<Numbers\r\n\t\t\t\t\tonClick={this.props.onClickOperando}\r\n\t\t\t\t\tonClickTotal={this.props.onClickOperador}\r\n\t\t\t\t/>\r\n\t\t\t\t<Operations onClick={this.props.onClickOperador} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Inputs;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Screen from \"./components/screen/Screen\";\r\nimport Inputs from \"./components/inputs/Inputs\";\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\toperando: \"\",\r\n\t\t\toperador: \"\",\r\n\t\t\tdisplay: \"0\",\r\n\t\t\tresultDisplayed: false\r\n\t\t};\r\n\t}\r\n\r\n\tonClickOperando = (e, label) => {\r\n\t\tvar display;\r\n\t\tif (\r\n\t\t\tthis.state.display === \"0\" ||\r\n\t\t\tisNaN(this.state.display) ||\r\n\t\t\tthis.state.resultDisplayed\r\n\t\t) {\r\n\t\t\tdisplay = label;\r\n\t\t\tthis.setState({ resultDisplayed: false });\r\n\t\t} else {\r\n\t\t\tdisplay = this.state.display + label;\r\n\t\t}\r\n\r\n\t\tthis.setState({ display: display });\r\n\t};\r\n\r\n\tonClickOperador = (e, label) => {\r\n\t\tif (this.state.operador.length > 0) {\r\n\t\t\tthis.calculate();\r\n\t\t\tif (label === \"=\") {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tresultDisplayed: true,\r\n\t\t\t\t\toperador: \"\"\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tresultDisplayed: true,\r\n\t\t\t\t\toperador: label\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\toperando: this.state.display,\r\n\t\t\t\toperador: label,\r\n\t\t\t\tdisplay: label\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tonClickClean = () => {\r\n\t\tvar state = {\r\n\t\t\toperando: \"\",\r\n\t\t\toperador: \"\",\r\n\t\t\tdisplay: \"0\",\r\n\t\t\tresultDisplayed: false\r\n\t\t};\r\n\t\tthis.setState(state);\r\n\t};\r\n\r\n\tcalculate = () => {\r\n\t\tvar displayResult;\r\n\t\tswitch (this.state.operador) {\r\n\t\t\tcase \"+\":\r\n\t\t\t\tdisplayResult =\r\n\t\t\t\t\tparseFloat(this.state.operando) +\r\n\t\t\t\t\tparseFloat(this.state.display);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"-\":\r\n\t\t\t\tdisplayResult =\r\n\t\t\t\t\tparseFloat(this.state.operando) -\r\n\t\t\t\t\tparseFloat(this.state.display);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"/\":\r\n\t\t\t\tdisplayResult =\r\n\t\t\t\t\tparseFloat(this.state.operando) /\r\n\t\t\t\t\tparseFloat(this.state.display);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"x\":\r\n\t\t\t\tdisplayResult =\r\n\t\t\t\t\tparseFloat(this.state.operando) *\r\n\t\t\t\t\tparseFloat(this.state.display);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"%\":\r\n\t\t\t\tdisplayResult =\r\n\t\t\t\t\t(parseFloat(this.state.operando) *\r\n\t\t\t\t\t\tparseFloat(this.state.display)) /\r\n\t\t\t\t\t100;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"x2\":\r\n\t\t\t\tdisplayResult =\r\n\t\t\t\t\tparseFloat(this.state.operando) *\r\n\t\t\t\t\tparseFloat(this.state.operando);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"V\":\r\n\t\t\t\tdisplayResult = Math.sqrt(parseFloat(this.state.operando));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tdisplayResult = \"Digite algo\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\toperando: displayResult,\r\n\t\t\tdisplay: displayResult\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"container\">\r\n\t\t\t\t<Screen\r\n\t\t\t\t\tdisplayText={this.state.display}\r\n\t\t\t\t\tonClickClean={this.onClickClean}\r\n\t\t\t\t/>\r\n\t\t\t\t<Inputs\r\n\t\t\t\t\tonClickOperando={this.onClickOperando}\r\n\t\t\t\t\tonClickOperador={this.onClickOperador}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}